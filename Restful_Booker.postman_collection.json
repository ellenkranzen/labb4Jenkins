{
	"info": {
		"_postman_id": "68e10a0e-ac24-4234-82e7-743e1170ee50",
		"name": "Restful_Booker",
		"description": "## Overview\nThe Restful Booker API is a sample API based on hotel bookings. The API contains endpoints to demonstrate CRUD operations. The source code can be obtained from https://github.com/mwinteringham/restful-booker\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.globals.set(\"my_booker_token\", pm.response.json().token);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Get auth token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Get Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"pm.test(\"Response time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.globals.set(\"NrOfBookings\", jsonData.length);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Create new Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"Response time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"Check firstname\", () => pm.expect(jsonData.booking.firstname).to.equal(pm.environment.get(\"firstname\")));",
									"pm.test(\"Check lasttname\", () => pm.expect(jsonData.booking.lastname).to.equal(pm.environment.get(\"lastname\")));",
									"pm.test(\"Check total price\", () => pm.expect(jsonData.booking.totalprice).to.equal(Number(pm.environment.get(\"totalprice\"))));",
									"pm.test(\"Check deposit paid\", () => pm.expect(jsonData.booking.depositpaid).to.equal(Boolean(pm.environment.get(\"depositpaid\"))));",
									"pm.test(\"Check additionals needs\", () => pm.expect(jsonData.booking.additionalneeds).to.equal(pm.environment.get(\"additionalneeds\")));",
									"pm.test(\"Check bookingdate: check-in\", () => pm.expect(jsonData.booking.bookingdates.checkin).to.equal(pm.environment.get(\"checkin\")));",
									"pm.test(\"Check bookingdate: check-out\", () => pm.expect(jsonData.booking.bookingdates.checkout).to.equal(pm.environment.get(\"checkout\")));",
									"",
									"",
									"",
									"pm.globals.set(\"bookingID\", jsonData.bookingid);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\" : \"{{firstname}}\",\r\n  \"lastname\" : \"{{lastname}}\",\r\n  \"totalprice\" : \"{{totalprice}}\",\r\n  \"depositpaid\" : \"{{depositpaid}}\",\r\n  \"additionalneeds\" : \"{{additionalneeds}}\",\r\n  \"bookingdates\" : {\r\n    \"checkin\" : \"{{checkin}}\",\r\n    \"checkout\" : \"{{checkout}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookings Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"pm.test(\"Response time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"Confirm NrOfBookings has been increased by one\", () => pm.expect(jsonData.length).to.equal(pm.globals.get(\"NrOfBookings\")+1));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"pm.test(\"Response time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"Check bookingID not empty\", () => pm.expect(jsonData.id).to.not.equal(null)); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"pm.test(\"Response time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"Check: booking is updated, firstname\", () => pm.expect(jsonData.firstname).to.include(pm.environment.get(\"putFirstname\")));",
									"pm.test(\"Check: booking is updated, bookingdate: check-in\", () => pm.expect(jsonData.bookingdates.checkin).to.include(pm.environment.get(\"putCheckin\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{putFirstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : \"{{totalprice}}\",\r\n    \"depositpaid\" : \"{{depositpaid}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{putCheckin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking (partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									"pm.test(\"Response time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"Check: booking is updated, firstname\", () => pm.expect(jsonData.firstname).to.include(pm.environment.get(\"patchFirstname\")));",
									"pm.test(\"Check: booking is updated, lastname\", () => pm.expect(jsonData.lastname).to.include(pm.environment.get(\"patchLastname\")));",
									"pm.test(\"Check: booking is updated, additional needs\", () => pm.expect(jsonData.additionalneeds).to.include(pm.environment.get(\"patchAdditionalneeds\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{my_booker_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{patchFirstname}}\",\r\n    \"lastname\" : \"{{patchLastname}}\",\r\n    \"additionalneeds\" : \"{{patchAdditionalneeds}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => pm.expect(responseCode.code).to.equal(201));",
									"pm.test(\"Respnse time should be below 2 sec\", () => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"",
									"var url = pm.environment.get(\"url\") + \"/booking/\" +  pm.globals.get(\"bookingID\");",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test('Response should be Not Found', function () {",
									"        pm.expect(res.status).to.include(\"Not Found\");",
									"    });",
									"    ",
									"    pm.test(\"Response code 404\", function() {",
									"        pm.expect(res.code).to.equal(404);",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}?=",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "All bookings requests "
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}